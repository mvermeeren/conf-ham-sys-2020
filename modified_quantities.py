import numpy as np

def kmod(order, method, h, Ed, potential=False):
    if potential:
        if order == 0:
            kmod1 = lambda px,x,py,y: 1/2*((py**2 + 1)*y**2 + px**2 + py**2 + x**2 - 2*Ed)/np.sqrt(y**2 + 1)
            kmod2=kmod3=kmod4=kmod5=kmod6 = kmod1
        if order == 2:
            kmod1 = lambda px,x,py,y: 1/96*((3*h**2*py**4 + 2*(h**2 + 24)*py**2 - h**2 + 48)*y**6 - 2*h**2*py**4 + 2*(2*h**2*py**4 - 2*(Ed + 1)*h**2 + (h**2 + 24)*px**2 - (3*h**2*px**2 - 2*(3*Ed + 2)*h**2 - 72)*py**2 - (3*h**2*py**2 - h**2 - 24)*x**2 - 48*Ed + 48)*y**4 - 4*(h**2 - 12)*px**2 + 2*(h**2*px**2 - 2*(Ed + 1)*h**2 + 24)*py**2 + 2*(h**2*py**2 - 2*h**2 + 24)*x**2 - (h**2*px**4 + h**2*py**4 + h**2*x**4 + 4*(Ed**2 + 2*Ed + 1)*h**2 - 4*(Ed*h**2 + 24)*px**2 + 2*(2*h**2*px**2 - (4*Ed + 1)*h**2 - 72)*py**2 + 2*(h**2*px**2 + 2*h**2*py**2 - 2*Ed*h**2 - 48)*x**2 + 192*Ed - 48)*y**2 - 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod2 = lambda px,x,py,y: -1/96*((9*h**2*py**4 - 2*(7*h**2 + 24)*py**2 + h**2 - 48)*y**6 - 4*h**2*py**4 + 2*(7*h**2*py**4 + 2*(Ed + 1)*h**2 - (h**2 + 24)*px**2 + (9*h**2*px**2 + (6*Ed - 7)*h**2 - 72)*py**2 - (3*h**2*py**2 + h**2 + 24)*x**2 + 48*Ed - 48)*y**4 + 4*(h**2 - 12)*px**2 - 4*(2*h**2*px**2 + (2*Ed - 1)*h**2 + 12)*py**2 + 4*(h**2*py**2 + h**2 - 12)*x**2 + (h**2*px**4 + h**2*py**4 + h**2*x**4 + 4*(Ed**2 + 2*Ed + 1)*h**2 - 4*(Ed*h**2 + 24)*px**2 + 2*(5*h**2*px**2 + 2*(Ed + 1)*h**2 - 72)*py**2 + 2*(h**2*px**2 - h**2*py**2 - 2*Ed*h**2 - 48)*x**2 + 192*Ed - 48)*y**2 + 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod3 = lambda px,x,py,y: 1/96*((3*h**2*py**4 + 2*(7*h**2 + 24)*py**2 - h**2 + 48)*y**6 - 2*h**2*py**4 + 2*(2*h**2*py**4 - 2*(Ed + 1)*h**2 + (h**2 + 24)*px**2 - (9*h**2*px**2 - 2*(3*Ed + 11)*h**2 - 72)*py**2 - (3*h**2*py**2 - h**2 - 24)*x**2 - 48*Ed + 48)*y**4 + 8*(h**2 + 6)*px**2 - 2*(5*h**2*px**2 + 2*(Ed - 2)*h**2 - 24)*py**2 + 2*(h**2*py**2 - 2*h**2 + 24)*x**2 - (h**2*px**4 + h**2*py**4 + h**2*x**4 + 4*(Ed**2 + 2*Ed + 1)*h**2 - 4*((Ed + 3)*h**2 + 24)*px**2 + 2*(14*h**2*px**2 - (4*Ed + 19)*h**2 - 72)*py**2 + 2*(h**2*px**2 + 2*h**2*py**2 - 2*Ed*h**2 - 48)*x**2 + 192*Ed - 48)*y**2 - 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod4 = lambda px,x,py,y: -1/96*((9*h**2*py**4 - 2*(13*h**2 + 24)*py**2 + h**2 - 48)*y**6 - 4*h**2*py**4 + 2*(7*h**2*py**4 + 2*(Ed + 1)*h**2 - (h**2 + 24)*px**2 + (15*h**2*px**2 + (6*Ed - 25)*h**2 - 72)*py**2 - (3*h**2*py**2 + h**2 + 24)*x**2 + 48*Ed - 48)*y**4 - 8*(h**2 + 6)*px**2 + 4*(h**2*px**2 - 2*(Ed + 1)*h**2 - 12)*py**2 + 4*(h**2*py**2 + h**2 - 12)*x**2 + (h**2*px**4 + h**2*py**4 + h**2*x**4 + 4*(Ed**2 + 2*Ed + 1)*h**2 - 4*((Ed + 3)*h**2 + 24)*px**2 + 2*(17*h**2*px**2 + 2*(Ed - 8)*h**2 - 72)*py**2 + 2*(h**2*px**2 - h**2*py**2 - 2*Ed*h**2 - 48)*x**2 + 192*Ed - 48)*y**2 + 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod5 = lambda px,x,py,y: -1/96*(24*h**2*px*py*x*y**3 + (9*h**2*py**4 - 2*(h**2 + 24)*py**2 + h**2 - 48)*y**6 - 4*h**2*py**4 + 24*h**2*px*py*x*y + 2*(7*h**2*py**4 + 2*(Ed + 1)*h**2 - (h**2 + 24)*px**2 + (3*h**2*px**2 + (6*Ed - 1)*h**2 - 72)*py**2 - (3*h**2*py**2 + h**2 + 24)*x**2 + 48*Ed - 48)*y**4 - 8*(h**2 + 6)*px**2 + 4*(h**2*px**2 - 2*(Ed + 1)*h**2 - 12)*py**2 + 4*(h**2*py**2 + h**2 - 12)*x**2 + (h**2*px**4 + h**2*py**4 + h**2*x**4 + 4*(Ed**2 + 2*Ed + 1)*h**2 - 4*((Ed + 3)*h**2 + 24)*px**2 + 2*(5*h**2*px**2 + 2*(Ed - 2)*h**2 - 72)*py**2 + 2*(h**2*px**2 - h**2*py**2 - 2*Ed*h**2 - 48)*x**2 + 192*Ed - 48)*y**2 + 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod6 = lambda px,x,py,y: 1/2*((py**2 + 1)*y**2 + px**2 + py**2 + x**2 - 2*Ed)/np.sqrt(y**2 + 1)
        if order == 4:
            kmod1 = lambda px,x,py,y: 1/3840*((15*h**4*py**6 + 5*(h**4 + 24*h**2)*py**4 - h**4 - (11*h**4 - 80*h**2 - 1920)*py**2 - 40*h**2 + 1920)*y**10 - 5*h**4*py**6 + 6*h**4*py**2*x**4 + (85*h**4*py**6 - 9*(2*Ed + 1)*h**4 + 5*(h**4*px**2 - (2*Ed - 13)*h**4 + 80*h**2)*py**4 - 80*(2*Ed + 3)*h**2 + (9*h**4 + 80*h**2 + 1920)*px**2 - 15*((4*Ed + 3)*h**4 - 32*(Ed + 1)*h**2 - 2*(h**4 - 8*h**2)*px**2 - 640)*py**2 + (5*h**4*py**4 + 9*h**4 + 30*(h**4 - 8*h**2)*py**2 + 80*h**2 + 1920)*x**2 - 3840*Ed + 7680)*y**8 + (160*h**4*py**6 - 6*(10*Ed**2 + 13*Ed + 3)*h**4 - 5*(3*h**4 + 8*h**2)*px**4 - (157*h**4*px**2 - 2*(157*Ed + 169)*h**4 - 400*h**2)*py**4 + 5*(h**4*py**2 - 3*h**4 - 8*h**2)*x**4 - 40*(4*Ed**2 + 16*Ed + 13)*h**2 + ((60*Ed + 19)*h**4 + 160*(Ed + 1)*h**2 + 7680)*px**2 + (5*h**4*px**4 + 4*(5*Ed**2 - 13*Ed - 1)*h**4 + 160*(8*Ed + 5)*h**2 - 2*((10*Ed - 63)*h**4 + 320*h**2)*px**2 + 19200)*py**2 - (157*h**4*py**4 - (60*Ed + 19)*h**4 - 160*(Ed + 1)*h**2 + 10*(3*h**4 + 8*h**2)*px**2 - 2*(5*h**4*px**2 - (10*Ed - 63)*h**4 - 320*h**2)*py**2 - 7680)*x**2 - 15360*Ed + 11520)*y**6 + (13*h**4*px**2 - 2*(13*Ed + 6)*h**4 - 80*h**2)*py**4 + (7*h**4*px**6 + 120*h**4*py**6 + 7*h**4*x**6 - 4*(14*Ed**3 + 27*Ed**2 + 12*Ed - 1)*h**4 - (7*(6*Ed + 1)*h**4 + 80*h**2)*px**4 - (316*h**4*px**2 - (632*Ed + 489)*h**4)*py**4 + (21*h**4*px**2 + 11*h**4*py**2 - 7*(6*Ed + 1)*h**4 - 80*h**2)*x**4 - 160*(2*Ed**2 + 5*Ed + 3)*h**2 + 4*((21*Ed**2 + 17*Ed - 3)*h**4 + 20*(4*Ed - 1)*h**2 + 2880)*px**2 + (11*h**4*px**4 + 2*(22*Ed**2 + 52*Ed + 51)*h**4 + 320*(3*Ed + 1)*h**2 - 4*((11*Ed - 32)*h**4 + 120*h**2)*px**2 + 19200)*py**2 + (21*h**4*px**4 - 316*h**4*py**4 + 4*(21*Ed**2 + 17*Ed - 3)*h**4 + 80*(4*Ed - 1)*h**2 - 2*(7*(6*Ed + 1)*h**4 + 80*h**2)*px**2 + 2*(11*h**4*px**2 - 2*(11*Ed - 32)*h**4 - 240*h**2)*py**2 + 11520)*x**2 - 23040*Ed + 7680)*y**4 + 8*(3*h**4 - 20*h**2 + 240)*px**2 + 2*(3*h**4*px**4 + 12*(Ed**2 + 2*Ed + 1)*h**4 - 80*(Ed + 1)*h**2 - 2*((6*Ed + 11)*h**4 - 20*h**2)*px**2 + 960)*py**2 + (13*h**4*py**4 + 24*h**4 + 4*(3*h**4*px**2 - (6*Ed + 11)*h**4 + 20*h**2)*py**2 - 160*h**2 + 1920)*x**2 - (3*h**4*px**6 - 25*h**4*py**6 + 3*h**4*x**6 - 24*(Ed**3 + 3*Ed**2 + 3*Ed + 1)*h**4 - 2*((9*Ed + 19)*h**4 - 20*h**2)*px**4 + (141*h**4*px**2 - (282*Ed + 199)*h**4 + 200*h**2)*py**4 + (9*h**4*px**2 - 12*h**4*py**2 - 2*(9*Ed + 19)*h**4 + 40*h**2)*x**4 + 160*(Ed**2 + 2*Ed + 1)*h**2 + 4*((9*Ed**2 + 28*Ed + 7)*h**4 - 40*(Ed - 2)*h**2 - 1920)*px**2 - 12*(h**4*px**4 - (4*Ed + 1)*h**4*px**2 + 4*(Ed**2 + 3*Ed + 2)*h**4 - 20*h**2 + 800)*py**2 + (9*h**4*px**4 + 141*h**4*py**4 + 4*(9*Ed**2 + 28*Ed + 7)*h**4 - 160*(Ed - 2)*h**2 - 4*((9*Ed + 19)*h**4 - 20*h**2)*px**2 - 12*(2*h**4*px**2 - (4*Ed + 1)*h**4)*py**2 - 7680)*x**2 + 15360*Ed - 1920)*y**2 - 3840*Ed)/((y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)*np.sqrt(y**2 + 1))
            kmod2 = lambda px,x,py,y: 1/3840*((255*h**4*py**6 - 15*(19*h**4 + 24*h**2)*py**4 - 11*h**4 + (209*h**4 + 560*h**2 + 1920)*py**2 - 40*h**2 + 1920)*y**10 + 80*h**4*py**6 + 16*h**4*py**2*x**4 + 160*(h**4*px*py**3 + h**4*px*py)*x*y**7 + (485*h**4*py**6 - 2*(19*Ed + 22)*h**4 + 5*(147*h**4*px**2 + 2*(49*Ed - 39)*h**4 - 256*h**2)*py**4 - 80*(2*Ed + 3)*h**2 + (39*h**4 + 80*h**2 + 1920)*px**2 - 15*((4*Ed - 31)*h**4 + 16*(2*Ed - 7)*h**2 + 6*(5*h**4 + 8*h**2)*px**2 - 640)*py**2 - (245*h**4*py**4 - 19*h**4 - 30*(h**4 + 8*h**2)*py**2 - 80*h**2 - 1920)*x**2 - 3840*Ed + 7680)*y**8 + (5*h**4*py**6 - 2*(10*Ed**2 + 34*Ed + 19)*h**4 - 5*(9*h**4 + 8*h**2)*px**4 + (578*h**4*px**2 + (64*Ed - 307)*h**4 - 1520*h**2)*py**4 + 5*(21*h**4*py**2 - h**4 - 8*h**2)*x**4 - 40*(4*Ed**2 + 16*Ed + 13)*h**2 + 4*((25*Ed + 21)*h**4 + 40*(Ed + 1)*h**2 + 1920)*px**2 + (265*h**4*px**4 + 28*(15*Ed**2 + 21*Ed + 17)*h**4 - 80*(14*Ed - 19)*h**2 + 2*((110*Ed - 177)*h**4 - 920*h**2)*px**2 + 19200)*py**2 - 2*(16*h**4*py**4 - (10*Ed + 7)*h**4 - 80*(Ed + 1)*h**2 + 5*(5*h**4 + 8*h**2)*px**2 + (55*h**4*px**2 + 3*(70*Ed + 39)*h**4 - 280*h**2)*py**2 - 3840)*x**2 - 15360*Ed + 11520)*y**6 - 80*(2*h**4*px*py*x**3 + (3*h**4*px*py**3 + (2*h**4*px**3 - (4*Ed + 5)*h**4*px)*py)*x)*y**5 + 8*(26*h**4*px**2 + 9*(2*Ed - 1)*h**4 + 20*h**2)*py**4 + (17*h**4*px**6 - 345*h**4*py**6 - 3*h**4*x**6 + 8*(3*Ed**3 + 4*Ed**2 + 4*Ed + 3)*h**4 - 2*((31*Ed + 16)*h**4 + 40*h**2)*px**4 - (841*h**4*px**2 + 2*(599*Ed + 328)*h**4 + 480*h**2)*py**4 + (11*h**4*px**2 - 19*h**4*py**2 + 2*(9*Ed + 14)*h**4 - 80*h**2)*x**4 - 160*(2*Ed**2 + 5*Ed + 3)*h**2 + 4*((11*Ed**2 + 12*Ed - 3)*h**4 + 20*(4*Ed - 1)*h**2 + 2880)*px**2 + (101*h**4*px**4 - 4*(19*Ed**2 - 86*Ed - 43)*h**4 - 80*(6*Ed - 1)*h**2 - 4*((41*Ed - 47)*h**4 + 300*h**2)*px**2 + 19200)*py**2 + (31*h**4*px**4 + 599*h**4*py**4 - 4*(9*Ed**2 + 18*Ed + 13)*h**4 + 80*(4*Ed - 1)*h**2 - 4*((11*Ed + 1)*h**4 + 40*h**2)*px**2 + 2*(41*h**4*px**2 + 2*(19*Ed - 13)*h**4 + 120*h**2)*py**2 + 11520)*x**2 - 23040*Ed + 7680)*y**4 - 80*(h**4*px*py*x**3 + (12*h**4*px*py**3 + (h**4*px**3 - (2*Ed + 1)*h**4*px)*py)*x)*y**3 + 8*(3*h**4 - 20*h**2 + 240)*px**2 + 8*(7*h**4*px**4 + (8*Ed**2 - 4*Ed + 3)*h**4 + 20*(2*Ed - 1)*h**2 + ((12*Ed - 13)*h**4 + 40*h**2)*px**2 + 240)*py**2 - 8*(9*h**4*py**4 - 3*h**4 + 2*(3*h**4*px**2 + (4*Ed - 1)*h**4 + 10*h**2)*py**2 + 20*h**2 - 240)*x**2 - 2*(4*h**4*px**6 + 20*h**4*py**6 - h**4*x**6 + 4*(2*Ed**3 + Ed**2 - 4*Ed - 3)*h**4 - ((14*Ed + 29)*h**4 - 20*h**2)*px**4 + (238*h**4*px**2 + (314*Ed + 263)*h**4 - 140*h**2)*py**4 + (2*h**4*px**2 + 54*h**4*py**2 + 3*(2*Ed - 3)*h**4 + 20*h**2)*x**4 + 80*(Ed**2 + 2*Ed + 1)*h**2 + 8*((Ed**2 + 7*Ed + 3)*h**4 - 10*(Ed - 2)*h**2 - 480)*px**2 + 6*(9*h**4*px**4 + 2*(18*Ed**2 + 14*Ed + 1)*h**4 - 40*(Ed - 1)*h**2 + ((24*Ed + 1)*h**4 - 20*h**2)*px**2 - 800)*py**2 + (7*h**4*px**4 - 157*h**4*py**4 - 4*(3*Ed**2 - 4*Ed - 1)*h**4 - 80*(Ed - 2)*h**2 - 2*((4*Ed + 19)*h**4 - 20*h**2)*px**2 - 6*(12*h**4*px**2 + (36*Ed + 19)*h**4 - 20*h**2)*py**2 - 3840)*x**2 + 7680*Ed - 960)*y**2 + 80*(h**4*px*py*x**3 - (7*h**4*px*py**3 - (h**4*px**3 - 2*(Ed + 1)*h**4*px)*py)*x)*y - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod3 = lambda px,x,py,y: 1/3840*((15*h**4*py**6 + 5*(19*h**4 + 24*h**2)*py**4 - 11*h**4 + (149*h**4 + 560*h**2 + 1920)*py**2 - 40*h**2 + 1920)*y**10 - 5*h**4*py**6 + 6*h**4*py**2*x**4 + 80*(h**4*px*py**3 + h**4*px*py)*x*y**7 + (85*h**4*py**6 - (58*Ed + 69)*h**4 + 5*(39*h**4*px**2 - (2*Ed - 73)*h**4 + 80*h**2)*py**4 - 80*(2*Ed + 3)*h**2 + (39*h**4 + 80*h**2 + 1920)*px**2 + 15*((12*Ed + 53)*h**4 + 32*(Ed + 6)*h**2 - 2*(11*h**4 + 24*h**2)*px**2 + 640)*py**2 + (5*h**4*py**4 + 29*h**4 - 30*(3*h**4 + 8*h**2)*py**2 + 80*h**2 + 1920)*x**2 - 3840*Ed + 7680)*y**8 + (160*h**4*py**6 - 2*(50*Ed**2 + 119*Ed + 74)*h**4 - 5*(9*h**4 + 8*h**2)*px**4 + (553*h**4*px**2 + 2*(157*Ed + 319)*h**4 + 400*h**2)*py**4 + 5*(h**4*py**2 - 5*h**4 - 8*h**2)*x**4 - 40*(4*Ed**2 + 16*Ed + 13)*h**2 + ((140*Ed + 209)*h**4 + 160*(Ed + 4)*h**2 + 7680)*px**2 + (205*h**4*px**4 + 4*(5*Ed**2 + 147*Ed + 399)*h**4 + 160*(8*Ed + 35)*h**2 - 2*((90*Ed + 827)*h**4 + 1280*h**2)*px**2 + 19200)*py**2 - (157*h**4*py**4 - (100*Ed + 99)*h**4 - 160*(Ed + 1)*h**2 + 10*(7*h**4 + 8*h**2)*px**2 - 2*(45*h**4*px**2 - (10*Ed + 77)*h**4 - 320*h**2)*py**2 - 7680)*x**2 - 15360*Ed + 11520)*y**6 - 80*(h**4*px*py*x**3 - (3*h**4*px*py**3 - (h**4*px**3 - 2*(Ed + 1)*h**4*px)*py)*x)*y**5 + (153*h**4*px**2 - 2*(13*Ed + 36)*h**4 - 80*h**2)*py**4 + (17*h**4*px**6 + 120*h**4*py**6 + 7*h**4*x**6 - 4*(14*Ed**3 + 47*Ed**2 + 62*Ed + 29)*h**4 - ((82*Ed + 147)*h**4 + 80*h**2)*px**4 + (674*h**4*px**2 + (632*Ed + 489)*h**4)*py**4 + (31*h**4*px**2 + 11*h**4*py**2 - 3*(14*Ed + 9)*h**4 - 80*h**2)*x**4 - 160*(2*Ed**2 + 5*Ed + 3)*h**2 + 4*((31*Ed**2 + 97*Ed + 97)*h**4 + 20*(4*Ed + 17)*h**2 + 2880)*px**2 + (491*h**4*px**4 + 2*(22*Ed**2 + 292*Ed + 731)*h**4 + 320*(3*Ed + 16)*h**2 - 4*((71*Ed + 643)*h**4 + 840*h**2)*px**2 + 19200)*py**2 + (41*h**4*px**4 - 316*h**4*py**4 + 4*(21*Ed**2 + 37*Ed + 12)*h**4 + 80*(4*Ed - 1)*h**2 - 2*((62*Ed + 87)*h**4 + 80*h**2)*px**2 + 2*(71*h**4*px**2 - 2*(11*Ed - 2)*h**4 - 240*h**2)*py**2 + 11520)*x**2 - 23040*Ed + 7680)*y**4 - 80*(2*h**4*px*py*x**3 - (3*h**4*px*py**3 - (2*h**4*px**3 - (4*Ed + 1)*h**4*px)*py)*x)*y**3 + 64*(h**4 + 5*h**2 + 30)*px**2 + 2*(43*h**4*px**4 + 4*(3*Ed**2 - 4*Ed + 8)*h**4 - 80*(Ed - 2)*h**2 + 4*((7*Ed - 33)*h**4 - 50*h**2)*px**2 + 960)*py**2 + (13*h**4*py**4 - 16*h**4 - 4*(7*h**4*px**2 + 3*(2*Ed - 3)*h**4 - 20*h**2)*py**2 - 160*h**2 + 1920)*x**2 + (7*h**4*px**6 + 25*h**4*py**6 - 3*h**4*x**6 + 8*(3*Ed**3 + 4*Ed**2 - Ed - 2)*h**4 - 2*((11*Ed + 36)*h**4 + 20*h**2)*px**4 + (469*h**4*px**2 + (282*Ed + 49)*h**4 - 200*h**2)*py**4 + (h**4*px**2 + 12*h**4*py**2 + 2*(9*Ed + 14)*h**4 - 40*h**2)*x**4 - 160*(Ed**2 + 2*Ed + 1)*h**2 + 4*((Ed**2 + 32*Ed + 63)*h**4 + 40*(Ed + 7)*h**2 + 1920)*px**2 + 12*(31*h**4*px**4 + 4*(Ed**2 + 3*Ed + 12)*h**4 - 2*((2*Ed + 63)*h**4 + 80*h**2)*px**2 + 180*h**2 + 800)*py**2 + (11*h**4*px**4 - 141*h**4*py**4 - 4*(9*Ed**2 + 18*Ed + 17)*h**4 + 160*(Ed - 2)*h**2 - 4*((Ed + 11)*h**4 + 20*h**2)*px**2 + 12*(2*h**4*px**2 - (4*Ed - 9)*h**4)*py**2 + 7680)*x**2 - 15360*Ed + 1920)*y**2 - 80*(h**4*px*py*x**3 - (h**4*px*py**3 - (h**4*px**3 - 2*Ed*h**4*px)*py)*x)*y - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod4 = lambda px,x,py,y: 1/3840*((255*h**4*py**6 - 15*(37*h**4 + 24*h**2)*py**4 - 21*h**4 + (609*h**4 + 1040*h**2 + 1920)*py**2 - 40*h**2 + 1920)*y**10 + 80*h**4*py**6 + 16*h**4*py**2*x**4 + 240*(h**4*px*py**3 + h**4*px*py)*x*y**7 + (485*h**4*py**6 - 26*(3*Ed + 4)*h**4 + 5*(305*h**4*px**2 + 2*(49*Ed - 135)*h**4 - 256*h**2)*py**4 - 80*(2*Ed + 3)*h**2 + (69*h**4 + 80*h**2 + 1920)*px**2 - 15*((20*Ed - 127)*h**4 + 16*(2*Ed - 17)*h**2 + 2*(43*h**4 + 40*h**2)*px**2 - 640)*py**2 - (245*h**4*py**4 - 39*h**4 - 30*(5*h**4 + 8*h**2)*py**2 - 80*h**2 - 1920)*x**2 - 3840*Ed + 7680)*y**8 + (5*h**4*py**6 - 12*(5*Ed**2 + 19*Ed + 14)*h**4 - 5*(15*h**4 + 8*h**2)*px**4 + (2788*h**4*px**2 + (64*Ed - 1447)*h**4 - 1520*h**2)*py**4 + 5*(21*h**4*py**2 - 3*h**4 - 8*h**2)*x**4 - 40*(4*Ed**2 + 16*Ed + 13)*h**2 + 2*((90*Ed + 137)*h**4 + 80*(Ed + 4)*h**2 + 3840)*px**2 + (705*h**4*px**4 + 28*(15*Ed**2 + Ed + 87)*h**4 - 80*(14*Ed - 79)*h**2 + 2*((270*Ed - 1607)*h**4 - 1880*h**2)*px**2 + 19200)*py**2 - 2*(16*h**4*py**4 - (30*Ed + 47)*h**4 - 80*(Ed + 1)*h**2 + 5*(9*h**4 + 8*h**2)*px**2 + (135*h**4*px**2 + (210*Ed - 43)*h**4 - 280*h**2)*py**2 - 3840)*x**2 - 15360*Ed + 11520)*y**6 - 80*(3*h**4*px*py*x**3 + (3*h**4*px**3 - (6*Ed + 7)*h**4*px)*py*x)*y**5 + 16*(3*h**4*px**2 + 3*(3*Ed + 1)*h**4 + 10*h**2)*py**4 + (27*h**4*px**6 - 345*h**4*py**6 - 3*h**4*x**6 + 24*(Ed**3 - 2*Ed**2 - 7*Ed - 4)*h**4 - 2*((51*Ed + 86)*h**4 + 40*h**2)*px**4 + (1049*h**4*px**2 - 2*(599*Ed + 508)*h**4 - 480*h**2)*py**4 + (21*h**4*px**2 - 19*h**4*py**2 + 2*(9*Ed + 4)*h**4 - 80*h**2)*x**4 - 160*(2*Ed**2 + 5*Ed + 3)*h**2 + 4*((21*Ed**2 + 92*Ed + 97)*h**4 + 20*(4*Ed + 17)*h**2 + 2880)*px**2 + (941*h**4*px**4 - 4*(19*Ed**2 - 26*Ed - 353)*h**4 - 80*(6*Ed - 61)*h**2 + 4*((79*Ed - 763)*h**4 - 1020*h**2)*px**2 + 19200)*py**2 + (51*h**4*px**4 + 599*h**4*py**4 - 4*(9*Ed**2 - 2*Ed - 2)*h**4 + 80*(4*Ed - 1)*h**2 - 4*((21*Ed + 41)*h**4 + 40*h**2)*px**2 - 2*(79*h**4*px**2 - 2*(19*Ed + 47)*h**4 - 120*h**2)*py**2 + 11520)*x**2 - 23040*Ed + 7680)*y**4 - 80*(3*h**4*px*py*x**3 + (9*h**4*px*py**3 + (3*h**4*px**3 - 2*(3*Ed + 1)*h**4*px)*py)*x)*y**3 + 64*(h**4 + 5*h**2 + 30)*px**2 + 16*(h**4*px**4 + 4*(Ed**2 + 2*Ed + 1)*h**4 + 20*(Ed + 1)*h**2 - ((4*Ed + 9)*h**4 + 10*h**2)*px**2 + 120)*py**2 - 8*(9*h**4*py**4 + 2*h**4 - (4*h**4*px**2 - (8*Ed + 3)*h**4 - 20*h**2)*py**2 + 20*h**2 - 240)*x**2 - 160*(3*h**4*px*py**3 + h**4*px*py)*x*y + 2*(h**4*px**6 - 20*h**4*py**6 + h**4*x**6 - 8*(Ed**3 + 3*Ed**2 + 3*Ed + 1)*h**4 - 2*((3*Ed + 13)*h**4 + 10*h**2)*px**4 - (83*h**4*px**2 + 2*(157*Ed + 79)*h**4 - 140*h**2)*py**4 + (3*h**4*px**2 - 54*h**4*py**2 - 2*(3*Ed - 2)*h**4 - 20*h**2)*x**4 - 80*(Ed**2 + 2*Ed + 1)*h**2 + 4*((3*Ed**2 + 16*Ed + 29)*h**4 + 20*(Ed + 7)*h**2 + 960)*px**2 + 6*(21*h**4*px**4 - 4*(9*Ed**2 + 2*Ed - 7)*h**4 + 40*(Ed + 4)*h**2 - 2*((12*Ed + 53)*h**4 + 70*h**2)*px**2 + 800)*py**2 + (3*h**4*px**4 + 157*h**4*py**4 + 4*(3*Ed**2 + Ed - 6)*h**4 + 80*(Ed - 2)*h**2 - 2*((6*Ed + 11)*h**4 + 20*h**2)*px**2 + 6*(12*h**4*px**2 + (36*Ed + 19)*h**4 - 20*h**2)*py**2 + 3840)*x**2 - 7680*Ed + 960)*y**2 - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod5 = lambda px,x,py,y: 1/3840*((255*h**4*py**6 - 15*(h**4 + 24*h**2)*py**4 - h**4 + (49*h**4 + 80*h**2 + 1920)*py**2 - 40*h**2 + 1920)*y**10 + 80*h**4*py**6 + 16*h**4*py**2*x**4 + 40*(17*h**4*px*py**3 + (h**4 - 24*h**2)*px*py)*x*y**7 + (485*h**4*py**6 + 2*(Ed - 2)*h**4 + 5*(37*h**4*px**2 + 2*(49*Ed - 5)*h**4 - 256*h**2)*py**4 - 80*(2*Ed + 3)*h**2 + (9*h**4 + 80*h**2 + 1920)*px**2 + 15*(3*(4*Ed + 5)*h**4 - 16*(2*Ed - 1)*h**2 - 2*(3*h**4 + 8*h**2)*px**2 + 640)*py**2 - (245*h**4*py**4 + h**4 + 30*(3*h**4 - 8*h**2)*py**2 - 80*h**2 - 1920)*x**2 - 3840*Ed + 7680)*y**8 + (5*h**4*py**6 + 4*(5*Ed**2 + 3*Ed - 2)*h**4 - 5*(3*h**4 + 8*h**2)*px**4 + (588*h**4*px**2 + (64*Ed - 707)*h**4 - 1520*h**2)*py**4 + 5*(21*h**4*py**2 + h**4 - 8*h**2)*x**4 - 40*(4*Ed**2 + 16*Ed + 13)*h**2 + 2*((10*Ed + 17)*h**4 + 80*(Ed + 4)*h**2 + 3840)*px**2 + (65*h**4*px**4 + 4*(105*Ed**2 + 127*Ed + 69)*h**4 - 560*(2*Ed - 1)*h**2 - 2*((50*Ed + 227)*h**4 + 440*h**2)*px**2 + 19200)*py**2 - 2*(16*h**4*py**4 + (10*Ed - 7)*h**4 - 80*(Ed + 1)*h**2 + 5*(h**4 + 8*h**2)*px**2 - (25*h**4*px**2 - 3*(70*Ed - 1)*h**4 + 280*h**2)*py**2 - 3840)*x**2 - 15360*Ed + 11520)*y**6 - 40*(5*h**4*px*py*x**3 - (26*h**4*px*py**3 + (h**4*px**3 + ((10*Ed - 3)*h**4 - 72*h**2)*px)*py)*x)*y**5 - 16*(2*h**4*px**2 - (9*Ed + 8)*h**4 - 10*h**2)*py**4 + (7*h**4*px**6 - 345*h**4*py**6 - 3*h**4*x**6 + 8*(3*Ed**3 + 4*Ed**2 - Ed - 2)*h**4 - 2*((11*Ed + 16)*h**4 + 40*h**2)*px**4 + (589*h**4*px**2 - 2*(599*Ed + 598)*h**4 - 480*h**2)*py**4 + (h**4*px**2 - 19*h**4*py**2 + 6*(3*Ed - 2)*h**4 - 80*h**2)*x**4 - 160*(2*Ed**2 + 5*Ed + 3)*h**2 + 4*((Ed**2 + 12*Ed + 27)*h**4 + 20*(4*Ed + 17)*h**2 + 2880)*px**2 + (61*h**4*px**4 - 4*(19*Ed**2 + 94*Ed + 27)*h**4 - 80*(6*Ed - 13)*h**2 + 12*((13*Ed - 41)*h**4 - 100*h**2)*px**2 + 19200)*py**2 + (11*h**4*px**4 + 599*h**4*py**4 - 4*(9*Ed**2 - 2*Ed - 12)*h**4 + 80*(4*Ed - 1)*h**2 - 4*((Ed - 19)*h**4 + 40*h**2)*px**2 - 2*(39*h**4*px**2 - 2*(19*Ed + 167)*h**4 - 120*h**2)*py**2 + 11520)*x**2 - 23040*Ed + 7680)*y**4 - 40*(3*h**4*px*py*x**3 - (h**4*px*py**3 + (3*h**4*px**3 + 2*((3*Ed - 8)*h**4 - 36*h**2)*px)*py)*x)*y**3 + 64*(h**4 + 5*h**2 + 30)*px**2 + 16*(h**4*px**4 + 4*(Ed**2 + 2*Ed + 1)*h**4 + 20*(Ed + 1)*h**2 - 2*(2*(Ed + 1)*h**4 + 5*h**2)*px**2 + 120)*py**2 - 8*(9*h**4*py**4 + 2*h**4 - (4*h**4*px**2 - (8*Ed + 13)*h**4 - 20*h**2)*py**2 + 20*h**2 - 240)*x**2 + 2*(h**4*px**6 - 20*h**4*py**6 + h**4*x**6 - 8*(Ed**3 + 3*Ed**2 + 3*Ed + 1)*h**4 - 2*(3*(Ed + 1)*h**4 + 10*h**2)*px**4 + (77*h**4*px**2 - 2*(157*Ed + 99)*h**4 + 140*h**2)*py**4 + (3*h**4*px**2 - 54*h**4*py**2 - 2*(3*Ed + 8)*h**4 - 20*h**2)*x**4 - 80*(Ed**2 + 2*Ed + 1)*h**2 + 4*((3*Ed**2 + 6*Ed + 19)*h**4 + 20*(Ed + 7)*h**2 + 960)*px**2 + 6*(h**4*px**4 - 12*(3*Ed**2 + 4*Ed + 1)*h**4 + 40*(Ed + 2)*h**2 + 4*(4*(Ed - 1)*h**4 - 15*h**2)*px**2 + 800)*py**2 + (3*h**4*px**4 + 157*h**4*py**4 + 4*(3*Ed**2 + 11*Ed + 4)*h**4 + 80*(Ed - 2)*h**2 - 2*((6*Ed - 19)*h**4 + 20*h**2)*px**2 - 6*(8*h**4*px**2 - 3*(12*Ed + 13)*h**4 + 20*h**2)*py**2 + 3840)*x**2 - 7680*Ed + 960)*y**2 + 80*(h**4*px*py*x**3 - (4*h**4*px*py**3 - (h**4*px**3 - 2*((Ed + 3)*h**4 + 6*h**2)*px)*py)*x)*y - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod6 = lambda px,x,py,y: -1/23040*(2*(15*h**4*py**4 + 3*h**4 + 2*(19*h**4 - 2880)*py**2 - 5760)*y**10 + 40*h**4*py**6 + 4*h**4*py**2*x**4 + 120*(3*h**4*px*py**3 + h**4*px*py)*x*y**7 - (75*h**4*py**6 - 3*(16*Ed + 13)*h**4 - 5*(6*h**4*px**2 + (24*Ed - 11)*h**4)*py**4 + 2*(7*h**4 + 5760)*px**2 + 5*(24*h**4*px**2 - (72*Ed + 71)*h**4 + 11520)*py**2 + 12*(5*h**4*py**4 + 15*h**4*py**2 + 2*h**4 + 960)*x**2 - 23040*Ed + 46080)*y**8 - (185*h**4*py**6 - 10*h**4*px**4 - 6*(20*Ed**2 + 33*Ed + 13)*h**4 - (297*h**4*px**2 - 2*(237*Ed + 379)*h**4)*py**4 - 30*(4*h**4*py**2 + h**4)*x**4 + ((80*Ed + 99)*h**4 + 46080)*px**2 - (60*h**4*px**4 - 2*(180*Ed + 253)*h**4*px**2 + (480*Ed**2 + 812*Ed + 359)*h**4 - 115200)*py**2 - (237*h**4*py**4 + 40*h**4*px**2 - 3*(40*Ed + 33)*h**4 + 2*(90*h**4*px**2 - (240*Ed + 83)*h**4)*py**2 - 46080)*x**2 - 92160*Ed + 69120)*y**6 - 120*(h**4*px*py*x**3 - (4*h**4*px*py**3 - (h**4*px**3 - (2*Ed + 1)*h**4*px)*py)*x)*y**5 + 4*(3*h**4*px**2 + 2*(7*Ed + 4)*h**4)*py**4 - (2*h**4*px**6 + 105*h**4*py**6 + 12*h**4*x**6 - (32*Ed + 57)*h**4*px**4 - 12*(8*Ed**3 + 19*Ed**2 + 14*Ed + 3)*h**4 - (516*h**4*px**2 - (1252*Ed + 1199)*h**4)*py**4 + (26*h**4*px**2 + 21*h**4*py**2 - 3*(24*Ed + 19)*h**4)*x**4 + 4*((26*Ed**2 + 57*Ed + 37)*h**4 + 17280)*px**2 + (41*h**4*px**4 - 2*(62*Ed - 79)*h**4*px**2 + 4*(21*Ed**2 + 121*Ed + 73)*h**4 + 115200)*py**2 + 2*(8*h**4*px**4 - 313*h**4*py**4 - (52*Ed + 57)*h**4*px**2 + 6*(12*Ed**2 + 19*Ed + 9)*h**4 + (31*h**4*px**2 - (42*Ed + 361)*h**4)*py**2 + 34560)*x**2 - 138240*Ed + 46080)*y**4 - 120*(h**4*px*py*x**3 + (h**4*px*py**3 + (h**4*px**3 - 2*(Ed - 1)*h**4*px)*py)*x)*y**3 + 16*(h**4 - 720)*px**2 + 4*(h**4*px**4 - 4*(Ed - 4)*h**4*px**2 + 4*(Ed**2 + 2*Ed + 1)*h**4 - 2880)*py**2 - 4*(7*h**4*py**4 + 6*h**4 - 2*(h**4*px**2 - 2*(Ed + 1)*h**4)*py**2 + 2880)*x**2 - 240*(h**4*px*py**3 + h**4*px*py)*x*y + (3*h**4*px**6 + 45*h**4*py**6 + 3*h**4*x**6 - 2*(9*Ed - 11)*h**4*px**4 - 24*(Ed**3 + 3*Ed**2 + 3*Ed + 1)*h**4 + (261*h**4*px**2 - 2*(301*Ed + 247)*h**4)*py**4 + (9*h**4*px**2 - 137*h**4*py**2 - 18*(Ed + 1)*h**4)*x**4 + 4*((9*Ed**2 - 2*Ed - 3)*h**4 - 11520)*px**2 - (97*h**4*px**4 - 4*(117*Ed + 73)*h**4*px**2 + 4*(137*Ed**2 + 226*Ed + 89)*h**4 + 57600)*py**2 + (9*h**4*px**4 + 301*h**4*py**4 - 4*(9*Ed - 1)*h**4*px**2 + 12*(3*Ed**2 + 6*Ed - 1)*h**4 - 2*(117*h**4*px**2 - 2*(137*Ed + 173)*h**4)*py**2 - 46080)*x**2 + 92160*Ed - 11520)*y**2 + 23040*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
        if order == 6:
            kmod1 = lambda px,x,py,y: 0
            kmod2 = lambda px,x,py,y: 0
            kmod3 = lambda px,x,py,y: 0
            kmod4 = lambda px,x,py,y: 0
            kmod5 = lambda px,x,py,y: 0
            kmod6 = lambda px,x,py,y: 0
    else:
        if order == 0:
            kmod1 = lambda px,x,py,y: 1/2*((y**2 + 1)*py**2 + px**2 - 2*Ed)/np.sqrt(y**2 + 1)
            kmod2=kmod3=kmod4=kmod5=kmod6 = kmod1
        if order == 2:
            kmod1 = lambda px,x,py,y: 1/96*(3*(h**2*py**4 + 16*py**2)*y**6 - 2*h**2*py**4 + 2*(2*h**2*py**4 - 3*(h**2*px**2 - 2*Ed*h**2 - 24)*py**2 + 24*px**2 - 48*Ed)*y**4 + 2*(h**2*px**2 - 2*Ed*h**2 + 24)*py**2 - (h**2*px**4 + h**2*py**4 + 4*Ed**2*h**2 - 4*(Ed*h**2 + 24)*px**2 + 4*(h**2*px**2 - 2*Ed*h**2 - 36)*py**2 + 192*Ed)*y**2 + 48*px**2 - 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod2 = lambda px,x,py,y: -1/96*(3*(3*h**2*py**4 - 16*py**2)*y**6 - 4*h**2*py**4 + 2*(7*h**2*py**4 + 3*(3*h**2*px**2 + 2*Ed*h**2 - 24)*py**2 - 24*px**2 + 48*Ed)*y**4 - 8*(h**2*px**2 + Ed*h**2 + 6)*py**2 + (h**2*px**4 + h**2*py**4 + 4*Ed**2*h**2 - 4*(Ed*h**2 + 24)*px**2 + 2*(5*h**2*px**2 + 2*Ed*h**2 - 72)*py**2 + 192*Ed)*y**2 - 48*px**2 + 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod3 = lambda px,x,py,y: 1/96*(3*(h**2*py**4 + 16*py**2)*y**6 - 2*h**2*py**4 + 2*(2*h**2*py**4 - 3*(3*h**2*px**2 - 2*Ed*h**2 - 24)*py**2 + 24*px**2 - 48*Ed)*y**4 - 2*(5*h**2*px**2 + 2*Ed*h**2 - 24)*py**2 - (h**2*px**4 + h**2*py**4 + 4*Ed**2*h**2 - 4*(Ed*h**2 + 24)*px**2 + 4*(7*h**2*px**2 - 2*Ed*h**2 - 36)*py**2 + 192*Ed)*y**2 + 48*px**2 - 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod4 = lambda px,x,py,y: -1/96*(3*(3*h**2*py**4 - 16*py**2)*y**6 - 4*h**2*py**4 + 2*(7*h**2*py**4 + 3*(5*h**2*px**2 + 2*Ed*h**2 - 24)*py**2 - 24*px**2 + 48*Ed)*y**4 + 4*(h**2*px**2 - 2*Ed*h**2 - 12)*py**2 + (h**2*px**4 + h**2*py**4 + 4*Ed**2*h**2 - 4*(Ed*h**2 + 24)*px**2 + 2*(17*h**2*px**2 + 2*Ed*h**2 - 72)*py**2 + 192*Ed)*y**2 - 48*px**2 + 96*Ed)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            kmod5 = lambda px,x,py,y: -1/96*(3*(3*h**2*py**4 - 16*py**2)*y**6 - 4*h**2*py**4 + 2*(7*h**2*py**4 + 3*(h**2*px**2 + 2*Ed*h**2 - 24)*py**2 - 24*px**2 + 48*Ed)*y**4 + 4*(h**2*px**2 - 2*Ed*h**2 - 12)*py**2 + (h**2*px**4 + h**2*py**4 + 4*Ed**2*h**2 - 4*(Ed*h**2 + 24)*px**2 + 2*(5*h**2*px**2 + 2*Ed*h**2 - 72)*py**2 + 192*Ed)*y**2 - 48*px**2 + 96*Ed)/((y**4 + 2*y**2 + 1)*np.sqrt(y**2 + 1))
            kmod6 = lambda px,x,py,y: 1/2*(py**2*y**2 + px**2 + py**2 - 2*Ed)/np.sqrt(y**2 + 1)
        if order == 4:
            kmod1 = lambda px,x,py,y: 1/3840*(15*(h**4*py**6 + 8*h**2*py**4 + 128*py**2)*y**10 - 5*h**4*py**6 + 5*(17*h**4*py**6 + (h**4*px**2 - 2*Ed*h**4 + 80*h**2)*py**4 - 48*(h**2*px**2 - 2*Ed*h**2 - 40)*py**2 + 384*px**2 - 768*Ed)*y**8 + (160*h**4*py**6 - 40*h**2*px**4 - (157*h**4*px**2 - 314*Ed*h**4 - 400*h**2)*py**4 - 160*Ed**2*h**2 + 160*(Ed*h**2 + 48)*px**2 + 5*(h**4*px**4 + 4*Ed**2*h**4 + 256*Ed*h**2 - 4*(Ed*h**4 + 32*h**2)*px**2 + 3840)*py**2 - 15360*Ed)*y**6 + (13*h**4*px**2 - 26*Ed*h**4 - 80*h**2)*py**4 + (7*h**4*px**6 + 120*h**4*py**6 - 56*Ed**3*h**4 - 2*(21*Ed*h**4 + 40*h**2)*px**4 - 316*(h**4*px**2 - 2*Ed*h**4)*py**4 - 320*Ed**2*h**2 + 4*(21*Ed**2*h**4 + 80*Ed*h**2 + 2880)*px**2 + (11*h**4*px**4 + 44*Ed**2*h**4 + 960*Ed*h**2 - 4*(11*Ed*h**4 + 120*h**2)*px**2 + 19200)*py**2 - 23040*Ed)*y**4 + 2*(3*h**4*px**4 + 12*Ed**2*h**4 - 80*Ed*h**2 - 4*(3*Ed*h**4 - 10*h**2)*px**2 + 960)*py**2 - (3*h**4*px**6 - 25*h**4*py**6 - 24*Ed**3*h**4 - 2*(9*Ed*h**4 - 20*h**2)*px**4 + (141*h**4*px**2 - 282*Ed*h**4 + 200*h**2)*py**4 + 160*Ed**2*h**2 + 4*(9*Ed**2*h**4 - 40*Ed*h**2 - 1920)*px**2 - 12*(h**4*px**4 - 4*Ed*h**4*px**2 + 4*Ed**2*h**4 + 800)*py**2 + 15360*Ed)*y**2 + 1920*px**2 - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod2 = lambda px,x,py,y: 1/3840*(15*(17*h**4*py**6 - 24*h**2*py**4 + 128*py**2)*y**10 + 80*h**4*py**6 + 5*(97*h**4*py**6 + (147*h**4*px**2 + 98*Ed*h**4 - 256*h**2)*py**4 - 48*(3*h**2*px**2 + 2*Ed*h**2 - 40)*py**2 + 384*px**2 - 768*Ed)*y**8 + (5*h**4*py**6 - 40*h**2*px**4 + 2*(289*h**4*px**2 + 32*Ed*h**4 - 760*h**2)*py**4 - 160*Ed**2*h**2 + 160*(Ed*h**2 + 48)*px**2 + 5*(53*h**4*px**4 + 84*Ed**2*h**4 - 224*Ed*h**2 + 4*(11*Ed*h**4 - 92*h**2)*px**2 + 3840)*py**2 - 15360*Ed)*y**6 + 16*(13*h**4*px**2 + 9*Ed*h**4 + 10*h**2)*py**4 + (17*h**4*px**6 - 345*h**4*py**6 + 24*Ed**3*h**4 - 2*(31*Ed*h**4 + 40*h**2)*px**4 - (841*h**4*px**2 + 1198*Ed*h**4 + 480*h**2)*py**4 - 320*Ed**2*h**2 + 4*(11*Ed**2*h**4 + 80*Ed*h**2 + 2880)*px**2 + (101*h**4*px**4 - 76*Ed**2*h**4 - 480*Ed*h**2 - 4*(41*Ed*h**4 + 300*h**2)*px**2 + 19200)*py**2 - 23040*Ed)*y**4 + 8*(7*h**4*px**4 + 8*Ed**2*h**4 + 40*Ed*h**2 + 4*(3*Ed*h**4 + 10*h**2)*px**2 + 240)*py**2 - 4*(2*h**4*px**6 + 10*h**4*py**6 + 4*Ed**3*h**4 - (7*Ed*h**4 - 10*h**2)*px**4 + (119*h**4*px**2 + 157*Ed*h**4 - 70*h**2)*py**4 + 40*Ed**2*h**2 + 4*(Ed**2*h**4 - 10*Ed*h**2 - 480)*px**2 + 3*(9*h**4*px**4 + 36*Ed**2*h**4 - 40*Ed*h**2 + 4*(6*Ed*h**4 - 5*h**2)*px**2 - 800)*py**2 + 3840*Ed)*y**2 + 1920*px**2 - 3840*Ed)/((y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)*np.sqrt(y**2 + 1))
            kmod3 = lambda px,x,py,y: 1/3840*(15*(h**4*py**6 + 8*h**2*py**4 + 128*py**2)*y**10 - 5*h**4*py**6 + 5*(17*h**4*py**6 + (39*h**4*px**2 - 2*Ed*h**4 + 80*h**2)*py**4 - 48*(3*h**2*px**2 - 2*Ed*h**2 - 40)*py**2 + 384*px**2 - 768*Ed)*y**8 + (160*h**4*py**6 - 40*h**2*px**4 + (553*h**4*px**2 + 314*Ed*h**4 + 400*h**2)*py**4 - 160*Ed**2*h**2 + 160*(Ed*h**2 + 48)*px**2 + 5*(41*h**4*px**4 + 4*Ed**2*h**4 + 256*Ed*h**2 - 4*(9*Ed*h**4 + 128*h**2)*px**2 + 3840)*py**2 - 15360*Ed)*y**6 + (153*h**4*px**2 - 26*Ed*h**4 - 80*h**2)*py**4 + (17*h**4*px**6 + 120*h**4*py**6 - 56*Ed**3*h**4 - 2*(41*Ed*h**4 + 40*h**2)*px**4 + 2*(337*h**4*px**2 + 316*Ed*h**4)*py**4 - 320*Ed**2*h**2 + 4*(31*Ed**2*h**4 + 80*Ed*h**2 + 2880)*px**2 + (491*h**4*px**4 + 44*Ed**2*h**4 + 960*Ed*h**2 - 4*(71*Ed*h**4 + 840*h**2)*px**2 + 19200)*py**2 - 23040*Ed)*y**4 + 2*(43*h**4*px**4 + 12*Ed**2*h**4 - 80*Ed*h**2 + 4*(7*Ed*h**4 - 50*h**2)*px**2 + 960)*py**2 + (7*h**4*px**6 + 25*h**4*py**6 + 24*Ed**3*h**4 - 2*(11*Ed*h**4 + 20*h**2)*px**4 + (469*h**4*px**2 + 282*Ed*h**4 - 200*h**2)*py**4 - 160*Ed**2*h**2 + 4*(Ed**2*h**4 + 40*Ed*h**2 + 1920)*px**2 + 12*(31*h**4*px**4 + 4*Ed**2*h**4 - 4*(Ed*h**4 + 40*h**2)*px**2 + 800)*py**2 - 15360*Ed)*y**2 + 1920*px**2 - 3840*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
            kmod4 = lambda px,x,py,y: 1/3840*(15*(17*h**4*py**6 - 24*h**2*py**4 + 128*py**2)*y**10 + 80*h**4*py**6 + 5*(97*h**4*py**6 + (305*h**4*px**2 + 98*Ed*h**4 - 256*h**2)*py**4 - 48*(5*h**2*px**2 + 2*Ed*h**2 - 40)*py**2 + 384*px**2 - 768*Ed)*y**8 + (5*h**4*py**6 - 40*h**2*px**4 + 4*(697*h**4*px**2 + 16*Ed*h**4 - 380*h**2)*py**4 - 160*Ed**2*h**2 + 160*(Ed*h**2 + 48)*px**2 + 5*(141*h**4*px**4 + 84*Ed**2*h**4 - 224*Ed*h**2 + 4*(27*Ed*h**4 - 188*h**2)*px**2 + 3840)*py**2 - 15360*Ed)*y**6 + 16*(3*h**4*px**2 + 9*Ed*h**4 + 10*h**2)*py**4 + (27*h**4*px**6 - 345*h**4*py**6 + 24*Ed**3*h**4 - 2*(51*Ed*h**4 + 40*h**2)*px**4 + (1049*h**4*px**2 - 1198*Ed*h**4 - 480*h**2)*py**4 - 320*Ed**2*h**2 + 4*(21*Ed**2*h**4 + 80*Ed*h**2 + 2880)*px**2 + (941*h**4*px**4 - 76*Ed**2*h**4 - 480*Ed*h**2 + 4*(79*Ed*h**4 - 1020*h**2)*px**2 + 19200)*py**2 - 23040*Ed)*y**4 + 16*(h**4*px**4 + 4*Ed**2*h**4 + 20*Ed*h**2 - 2*(2*Ed*h**4 + 5*h**2)*px**2 + 120)*py**2 + 2*(h**4*px**6 - 20*h**4*py**6 - 8*Ed**3*h**4 - 2*(3*Ed*h**4 + 10*h**2)*px**4 - (83*h**4*px**2 + 314*Ed*h**4 - 140*h**2)*py**4 - 80*Ed**2*h**2 + 4*(3*Ed**2*h**4 + 20*Ed*h**2 + 960)*px**2 + 6*(21*h**4*px**4 - 36*Ed**2*h**4 + 40*Ed*h**2 - 4*(6*Ed*h**4 + 35*h**2)*px**2 + 800)*py**2 - 7680*Ed)*y**2 + 1920*px**2 - 3840*Ed)/((y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)*np.sqrt(y**2 + 1))
            kmod5 = lambda px,x,py,y: 1/3840*(15*(17*h**4*py**6 - 24*h**2*py**4 + 128*py**2)*y**10 + 80*h**4*py**6 + 5*(97*h**4*py**6 + (37*h**4*px**2 + 98*Ed*h**4 - 256*h**2)*py**4 - 48*(h**2*px**2 + 2*Ed*h**2 - 40)*py**2 + 384*px**2 - 768*Ed)*y**8 + (5*h**4*py**6 - 40*h**2*px**4 + 4*(147*h**4*px**2 + 16*Ed*h**4 - 380*h**2)*py**4 - 160*Ed**2*h**2 + 160*(Ed*h**2 + 48)*px**2 + 5*(13*h**4*px**4 + 84*Ed**2*h**4 - 224*Ed*h**2 - 4*(5*Ed*h**4 + 44*h**2)*px**2 + 3840)*py**2 - 15360*Ed)*y**6 - 16*(2*h**4*px**2 - 9*Ed*h**4 - 10*h**2)*py**4 + (7*h**4*px**6 - 345*h**4*py**6 + 24*Ed**3*h**4 - 2*(11*Ed*h**4 + 40*h**2)*px**4 + (589*h**4*px**2 - 1198*Ed*h**4 - 480*h**2)*py**4 - 320*Ed**2*h**2 + 4*(Ed**2*h**4 + 80*Ed*h**2 + 2880)*px**2 + (61*h**4*px**4 - 76*Ed**2*h**4 - 480*Ed*h**2 + 12*(13*Ed*h**4 - 100*h**2)*px**2 + 19200)*py**2 - 23040*Ed)*y**4 + 16*(h**4*px**4 + 4*Ed**2*h**4 + 20*Ed*h**2 - 2*(2*Ed*h**4 + 5*h**2)*px**2 + 120)*py**2 + 2*(h**4*px**6 - 20*h**4*py**6 - 8*Ed**3*h**4 - 2*(3*Ed*h**4 + 10*h**2)*px**4 + (77*h**4*px**2 - 314*Ed*h**4 + 140*h**2)*py**4 - 80*Ed**2*h**2 + 4*(3*Ed**2*h**4 + 20*Ed*h**2 + 960)*px**2 + 6*(h**4*px**4 - 36*Ed**2*h**4 + 40*Ed*h**2 + 4*(4*Ed*h**4 - 15*h**2)*px**2 + 800)*py**2 - 7680*Ed)*y**2 + 1920*px**2 - 3840*Ed)/((y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)*np.sqrt(y**2 + 1))
            kmod6 = lambda px,x,py,y: 1/23040*(11520*py**2*y**10 - 40*h**4*py**6 + 15*(5*h**4*py**6 - 2*(h**4*px**2 + 4*Ed*h**4)*py**4 + 768*px**2 + 3840*py**2 - 1536*Ed)*y**8 + (185*h**4*py**6 - 3*(99*h**4*px**2 - 158*Ed*h**4)*py**4 - 60*(h**4*px**4 - 6*Ed*h**4*px**2 + 8*Ed**2*h**4 - 1920)*py**2 + 46080*px**2 - 92160*Ed)*y**6 - 4*(3*h**4*px**2 + 14*Ed*h**4)*py**4 + (2*h**4*px**6 + 105*h**4*py**6 - 32*Ed*h**4*px**4 - 96*Ed**3*h**4 - 4*(129*h**4*px**2 - 313*Ed*h**4)*py**4 + 8*(13*Ed**2*h**4 + 8640)*px**2 + (41*h**4*px**4 - 124*Ed*h**4*px**2 + 84*Ed**2*h**4 + 115200)*py**2 - 138240*Ed)*y**4 - 4*(h**4*px**4 - 4*Ed*h**4*px**2 + 4*Ed**2*h**4 - 2880)*py**2 - (3*h**4*px**6 + 45*h**4*py**6 - 18*Ed*h**4*px**4 - 24*Ed**3*h**4 + (261*h**4*px**2 - 602*Ed*h**4)*py**4 + 36*(Ed**2*h**4 - 1280)*px**2 - (97*h**4*px**4 - 468*Ed*h**4*px**2 + 548*Ed**2*h**4 + 57600)*py**2 + 92160*Ed)*y**2 + 11520*px**2 - 23040*Ed)*np.sqrt(y**2 + 1)/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)
        if order == 6:
            kmod1 = lambda px,x,py,y: 0
            kmod2 = lambda px,x,py,y: 0
            kmod3 = lambda px,x,py,y: 0
            kmod4 = lambda px,x,py,y: 0
            kmod5 = lambda px,x,py,y: 0
            kmod6 = lambda px,x,py,y: 0
    switch = {"M": kmod1, "TM": kmod2, "MT": kmod3, "TT": kmod4, "T": kmod5, "4th": kmod6}
    if method in switch:
        return switch[method]
    else:
        return lambda px,x,py,y: 1/2*((py**2 + 1)*y**2 + px**2 + py**2 + x**2 - 2*Ed)/np.sqrt(y**2 + 1)
    
def emod(order, method, h, potential=False):
    if potential:
        if order == 0:
            emod1 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2 + 1/2*y**2
            emod2=emod3=emod4=emod5=emod6 = emod1
        if order == 2:
            emod1 = lambda px,x,py,y: 1/24*(2*py**4*y**4/(y**2 + 1) + py**4*y**2/(y**2 + 1) + py**2*y**4/(y**2 + 1) - py**4/(y**2 + 1) - y**4/(y**2 + 1) - px**2/(y**2 + 1) - py**2/(y**2 + 1) - x**2/(y**2 + 1) - y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod2 = lambda px,x,py,y: -1/24*(4*py**4*y**4/(y**2 + 1) + 6*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - py**2*y**4/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - 2*py**4/(y**2 + 1) + y**4/(y**2 + 1) + px**2/(y**2 + 1) + py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod3 = lambda px,x,py,y: 1/24*(2*py**4*y**4/(y**2 + 1) - 3*px**2*py**2*y**2/(y**2 + 1) + py**4*y**2/(y**2 + 1) + 4*py**2*y**4/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - py**4/(y**2 + 1) + 6*py**2*y**2/(y**2 + 1) - y**4/(y**2 + 1) + 2*px**2/(y**2 + 1) + 2*py**2/(y**2 + 1) - x**2/(y**2 + 1) - y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod4 = lambda px,x,py,y: -1/24*(4*py**4*y**4/(y**2 + 1) + 9*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 4*py**2*y**4/(y**2 + 1) - 2*py**4/(y**2 + 1) - 6*py**2*y**2/(y**2 + 1) + y**4/(y**2 + 1) - 2*px**2/(y**2 + 1) - 2*py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod5 = lambda px,x,py,y: -1/24*(4*py**4*y**4/(y**2 + 1) + 3*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) + 2*py**2*y**4/(y**2 + 1) - 2*py**4/(y**2 + 1) + 6*px*py*x*y/(y**2 + 1) + y**4/(y**2 + 1) - 2*px**2/(y**2 + 1) - 2*py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod6 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2 + 1/2*y**2
        if order == 4:        
            emod1 = lambda px,x,py,y: 1/1440*(13*py**6*y**6/(y**4 + 2*y**2 + 1) + 84*py**6*y**4/(y**4 + 2*y**2 + 1) - 26*py**4*y**6/(y**4 + 2*y**2 + 1) + 69*py**6*y**2/(y**4 + 2*y**2 + 1) + 75*py**4*y**4/(y**4 + 2*y**2 + 1) - 46*py**2*y**6/(y**4 + 2*y**2 + 1) - 2*py**6/(y**4 + 2*y**2 + 1) + 25*px**2*py**2*y**2/(y**4 + 2*y**2 + 1) + 108*py**4*y**2/(y**4 + 2*y**2 + 1) + 25*py**2*x**2*y**2/(y**4 + 2*y**2 + 1) - 7*py**2*y**4/(y**4 + 2*y**2 + 1) - 7*y**6/(y**4 + 2*y**2 + 1) - 5*px**2*py**2/(y**4 + 2*y**2 + 1) + 7*py**4/(y**4 + 2*y**2 + 1) - 5*py**2*x**2/(y**4 + 2*y**2 + 1) - 10*px**2*y**2/(y**4 + 2*y**2 + 1) + 48*py**2*y**2/(y**4 + 2*y**2 + 1) - 10*x**2*y**2/(y**4 + 2*y**2 + 1) + 2*y**4/(y**4 + 2*y**2 + 1) + 9*px**2/(y**4 + 2*y**2 + 1) + 9*py**2/(y**4 + 2*y**2 + 1) + 9*x**2/(y**4 + 2*y**2 + 1) + 9*y**2/(y**4 + 2*y**2 + 1))*h**4 + 1/24*(2*py**4*y**4/(y**2 + 1) + py**4*y**2/(y**2 + 1) + py**2*y**4/(y**2 + 1) - py**4/(y**2 + 1) - y**4/(y**2 + 1) - px**2/(y**2 + 1) - py**2/(y**2 + 1) - x**2/(y**2 + 1) - y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod2 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 555*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 64*py**4*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 180*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 120*px*py**3*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) + 4*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 104*py**2*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**4*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 585*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 120*px*py**3*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) + 25*px**2*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 222*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 25*py**2*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 120*px*py*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) + 30*px**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 7*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 150*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 240*px*py**3*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) - 25*px**2*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 200*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 20*py**2*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 60*px*py*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) + 5*px**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 41*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 10*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 5*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 50*px**2*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 38*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 5*py**2*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 60*px*py*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) - 16*px**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 18*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 11*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 9*px**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 9*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 9*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 9*y**2/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 - 1/24*(4*py**4*y**4/(y**2 + 1) + 6*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - py**2*y**4/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - 2*py**4/(y**2 + 1) + y**4/(y**2 + 1) + px**2/(y**2 + 1) + py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod3 = lambda px,x,py,y: 1/1440*(13*py**6*y**6/(y**4 + 2*y**2 + 1) + 30*px**2*py**4*y**4/(y**4 + 2*y**2 + 1) + 84*py**6*y**4/(y**4 + 2*y**2 + 1) + 64*py**4*y**6/(y**4 + 2*y**2 + 1) + 45*px**4*py**2*y**2/(y**4 + 2*y**2 + 1) + 105*px**2*py**4*y**2/(y**4 + 2*y**2 + 1) + 69*py**6*y**2/(y**4 + 2*y**2 + 1) + 60*px*py**3*x*y**3/(y**4 + 2*y**2 + 1) - 90*px**2*py**2*y**4/(y**4 + 2*y**2 + 1) + 210*py**4*y**4/(y**4 + 2*y**2 + 1) + 29*py**2*y**6/(y**4 + 2*y**2 + 1) + 45*px**4*py**2/(y**4 + 2*y**2 + 1) + 75*px**2*py**4/(y**4 + 2*y**2 + 1) - 2*py**6/(y**4 + 2*y**2 + 1) + 60*px*py**3*x*y/(y**4 + 2*y**2 + 1) - 260*px**2*py**2*y**2/(y**4 + 2*y**2 + 1) + 108*py**4*y**2/(y**4 + 2*y**2 + 1) + 40*py**2*x**2*y**2/(y**4 + 2*y**2 + 1) + 60*px*py*x*y**3/(y**4 + 2*y**2 + 1) + 15*px**2*y**4/(y**4 + 2*y**2 + 1) + 158*py**2*y**4/(y**4 + 2*y**2 + 1) - 22*y**6/(y**4 + 2*y**2 + 1) - 110*px**2*py**2/(y**4 + 2*y**2 + 1) - 38*py**4/(y**4 + 2*y**2 + 1) + 10*py**2*x**2/(y**4 + 2*y**2 + 1) + 35*px**2*y**2/(y**4 + 2*y**2 + 1) + 153*py**2*y**2/(y**4 + 2*y**2 + 1) - 10*x**2*y**2/(y**4 + 2*y**2 + 1) - 28*y**4/(y**4 + 2*y**2 + 1) + 24*px**2/(y**4 + 2*y**2 + 1) + 24*py**2/(y**4 + 2*y**2 + 1) - 6*x**2/(y**4 + 2*y**2 + 1) - 6*y**2/(y**4 + 2*y**2 + 1))*h**4 + 1/24*(2*py**4*y**4/(y**2 + 1) - 3*px**2*py**2*y**2/(y**2 + 1) + py**4*y**2/(y**2 + 1) + 4*py**2*y**4/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - py**4/(y**2 + 1) + 6*py**2*y**2/(y**2 + 1) - y**4/(y**2 + 1) + 2*px**2/(y**2 + 1) + 2*py**2/(y**2 + 1) - x**2/(y**2 + 1) - y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod4 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 945*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 116*py**4*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 405*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 495*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 180*px*py**3*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) - 270*px**2*py**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 446*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 179*py**2*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) - 405*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 710*px**2*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 492*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 40*py**2*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 180*px*py*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 412*py**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 22*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px*py**3*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) - 460*px**2*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 110*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 50*py**2*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 120*px*py*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) + 65*px**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 311*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 10*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 50*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 20*px**2*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 52*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 10*py**2*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 60*px*py*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) + 44*px**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 102*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 16*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 34*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 24*px**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 24*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 6*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 - 1/24*(4*py**4*y**4/(y**2 + 1) + 9*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 4*py**2*y**4/(y**2 + 1) - 2*py**4/(y**2 + 1) - 6*py**2*y**2/(y**2 + 1) + y**4/(y**2 + 1) - 2*px**2/(y**2 + 1) - 2*py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod5 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 255*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 244*py**4*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 105*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 390*px*py**3*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) + 90*px**2*py**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 34*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 119*py**2*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) - 135*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 90*px**3*py*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) + 210*px*py**3*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) - 110*px**2*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 582*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 115*py**2*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 120*px*py*x*y**5/(y**6 + 3*y**4 + 3*y**2 + 1) + 15*px**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 112*py**2*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 8*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 15*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px*py**3*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) - 190*px**2*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 290*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**2*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 95*py**2*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 60*px*py*x*y**3/(y**6 + 3*y**4 + 3*y**2 + 1) + 5*px**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 109*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 20*x**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 10*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 10*px**2*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 82*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 20*py**2*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px*py*x*y/(y**6 + 3*y**4 + 3*y**2 + 1) + 14*px**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 78*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 14*x**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 24*px**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 24*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 6*x**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 - 1/24*(4*py**4*y**4/(y**2 + 1) + 3*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) + 2*py**2*y**4/(y**2 + 1) - 2*py**4/(y**2 + 1) + 6*px*py*x*y/(y**2 + 1) + y**4/(y**2 + 1) - 2*px**2/(y**2 + 1) - 2*py**2/(y**2 + 1) + x**2/(y**2 + 1) + y**2/(y**2 + 1))*h**2 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
            emod6 = lambda px,x,py,y: -1/2880*(24*py**6*y**6/(y**4 + 2*y**2 + 1) + 20*px**2*py**4*y**4/(y**4 + 2*y**2 + 1) - 48*py**6*y**4/(y**4 + 2*y**2 + 1) + 72*py**4*y**6/(y**4 + 2*y**2 + 1) - 20*px**2*py**4*y**2/(y**4 + 2*y**2 + 1) - 63*py**6*y**2/(y**4 + 2*y**2 + 1) + 60*px*py**3*x*y**3/(y**4 + 2*y**2 + 1) + 20*px**2*py**2*y**4/(y**4 + 2*y**2 + 1) - 60*py**4*y**4/(y**4 + 2*y**2 + 1) + 62*py**2*y**6/(y**4 + 2*y**2 + 1) + 5*px**2*py**4/(y**4 + 2*y**2 + 1) + 9*py**6/(y**4 + 2*y**2 + 1) - 30*px*py**3*x*y/(y**4 + 2*y**2 + 1) - 45*px**2*py**2*y**2/(y**4 + 2*y**2 + 1) - 126*py**4*y**2/(y**4 + 2*y**2 + 1) + 30*py**2*x**2*y**2/(y**4 + 2*y**2 + 1) + 30*px*py*x*y**3/(y**4 + 2*y**2 + 1) + 5*px**2*y**4/(y**4 + 2*y**2 + 1) + 9*py**2*y**4/(y**4 + 2*y**2 + 1) + 9*y**6/(y**4 + 2*y**2 + 1) + 10*px**2*py**2/(y**4 + 2*y**2 + 1) + 6*py**4/(y**4 + 2*y**2 + 1) - 30*px*py*x*y/(y**4 + 2*y**2 + 1) - 10*px**2*y**2/(y**4 + 2*y**2 + 1) - 51*py**2*y**2/(y**4 + 2*y**2 + 1) + 6*y**4/(y**4 + 2*y**2 + 1) + 2*px**2/(y**4 + 2*y**2 + 1) + 2*py**2/(y**4 + 2*y**2 + 1) - 3*x**2/(y**4 + 2*y**2 + 1) - 3*y**2/(y**4 + 2*y**2 + 1))*h**4 + 1/2*(py**2 + 1)*y**2 + 1/2*px**2 + 1/2*py**2 + 1/2*x**2
        if order == 6:
            emod1 = lambda px,x,py,y: 0
            emod2 = lambda px,x,py,y: 0
            emod3 = lambda px,x,py,y: 0
            emod4 = lambda px,x,py,y: 0
            emod5 = lambda px,x,py,y: 0
            emod6 = lambda px,x,py,y: 0
    else:
        if order == 0:
            emod1 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2
            emod2=emod3=emod4=emod5=emod6 = emod1
        if order == 2:
            emod1 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod2 = lambda px,x,py,y: 1/2*py**2*y**2 - 1/24*(4*py**4*y**4 - 3*px**2*py**2 - 2*py**4 + 2*(3*px**2*py**2 + py**4)*y**2)*h**2/(y**2 + 1) + 1/2*px**2 + 1/2*py**2
            emod3 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - 3*px**2*py**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod4 = lambda px,x,py,y: 1/2*py**2*y**2 - 1/24*(4*py**4*y**4 - 2*py**4 + (9*px**2*py**2 + 2*py**4)*y**2)*h**2/(y**2 + 1) + 1/2*px**2 + 1/2*py**2
            emod5 = lambda px,x,py,y: 1/2*py**2*y**2 - 1/24*(4*py**4*y**4 - 2*py**4 + (3*px**2*py**2 + 2*py**4)*y**2)*h**2/(y**2 + 1) + 1/2*px**2 + 1/2*py**2
            emod6 = lambda px,x,py,y: 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2
        if order == 4:
            emod1 = lambda px,x,py,y: 1/1440*(13*py**6*y**4/(y**2 + 1) + 71*py**6*y**2/(y**2 + 1) - 2*py**6/(y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod2 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 555*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 180*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**4*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 585*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 150*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 6*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod3 = lambda px,x,py,y: 1/1440*(13*py**6*y**4/(y**2 + 1) + 30*px**2*py**4*y**2/(y**2 + 1) + 71*py**6*y**2/(y**2 + 1) + 45*px**4*py**2/(y**2 + 1) + 75*px**2*py**4/(y**2 + 1) - 2*py**6/(y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - 3*px**2*py**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod4 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 945*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 405*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 495*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 405*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 9*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod5 = lambda px,x,py,y: 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 255*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 105*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 135*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 15*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 3*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod6 = lambda px,x,py,y: -1/2880*(24*py**6*y**6/(y**4 + 2*y**2 + 1) + 20*px**2*py**4*y**4/(y**4 + 2*y**2 + 1) - 48*py**6*y**4/(y**4 + 2*y**2 + 1) - 20*px**2*py**4*y**2/(y**4 + 2*y**2 + 1) - 63*py**6*y**2/(y**4 + 2*y**2 + 1) + 5*px**2*py**4/(y**4 + 2*y**2 + 1) + 9*py**6/(y**4 + 2*y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2
        if order == 6:
            emod1 = lambda px,x,py,y: 1/120960*(242*py**8*y**6/(y**4 + 2*y**2 + 1) - 5707*py**8*y**4/(y**4 + 2*y**2 + 1) + 6340*py**8*y**2/(y**4 + 2*y**2 + 1) - 311*py**8/(y**4 + 2*y**2 + 1))*h**6 + 1/1440*(13*py**6*y**4/(y**2 + 1) + 71*py**6*y**2/(y**2 + 1) - 2*py**6/(y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod2 = lambda px,x,py,y: -1/120960*(40624*py**8*y**12/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 105588*px**2*py**6*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 15208*py**8*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 64260*px**4*py**4*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 51492*px**2*py**6*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 133480*py**8*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 7560*px**6*py**2*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 65520*px**4*py**4*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 264873*px**2*py**6*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 91500*py**8*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 11340*px**6*py**2*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 60480*px**4*py**4*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 31563*px**2*py**6*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 69100*py**8*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 5670*px**6*py**2*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 60480*px**4*py**4*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 123837*px**2*py**6*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 46484*py**8*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 945*px**6*py**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 8820*px**4*py**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 15519*px**2*py**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 6052*py**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1))*h**6 + 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 555*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 180*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 180*px**4*py**2*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 585*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 150*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 6*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 3*px**2*py**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod3 = lambda px,x,py,y: 1/120960*(242*py**8*y**6/(y**4 + 2*y**2 + 1) - 1449*px**2*py**6*y**4/(y**4 + 2*y**2 + 1) - 5707*py**8*y**4/(y**4 + 2*y**2 + 1) - 6615*px**4*py**4*y**2/(y**4 + 2*y**2 + 1) - 9093*px**2*py**6*y**2/(y**4 + 2*y**2 + 1) + 6340*py**8*y**2/(y**4 + 2*y**2 + 1) - 945*px**6*py**2/(y**4 + 2*y**2 + 1) - 4410*px**4*py**4/(y**4 + 2*y**2 + 1) - 1974*px**2*py**6/(y**4 + 2*y**2 + 1) - 311*py**8/(y**4 + 2*y**2 + 1))*h**6 + 1/1440*(13*py**6*y**4/(y**2 + 1) + 30*px**2*py**4*y**2/(y**2 + 1) + 71*py**6*y**2/(y**2 + 1) + 45*px**4*py**2/(y**2 + 1) + 75*px**2*py**4/(y**2 + 1) - 2*py**6/(y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/24*(2*py**4*y**2 - 3*px**2*py**2 - py**4)*h**2 + 1/2*px**2 + 1/2*py**2
            emod4 = lambda px,x,py,y: -1/120960*(40624*py**8*y**12/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 192087*px**2*py**6*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 15208*py**8*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 172935*px**4*py**4*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 132048*px**2*py**6*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 133480*py**8*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 25515*px**6*py**2*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 87885*px**4*py**4*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 222768*px**2*py**6*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 91500*py**8*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 70875*px**4*py**4*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 78372*px**2*py**6*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 69100*py**8*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 14175*px**4*py**4*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 79317*px**2*py**6*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 46484*py**8*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 5040*px**2*py**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 6052*py**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1))*h**6 + 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 945*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 405*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 495*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 405*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 9*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod5 = lambda px,x,py,y: -1/120960*(40624*py**8*y**12/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 46809*px**2*py**6*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 15208*py**8*y**10/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 14175*px**4*py**4*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 21336*px**2*py**6*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 133480*py**8*y**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 945*px**6*py**2*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 4725*px**4*py**4*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 70476*px**2*py**6*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 91500*py**8*y**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 7875*px**4*py**4*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 19404*px**2*py**6*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 69100*py**8*y**4/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 1575*px**4*py**4*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 23919*px**2*py**6*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) + 46484*py**8*y**2/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 1680*px**2*py**6/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1) - 6052*py**8/(y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1))*h**6 + 1/1440*(268*py**6*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 255*px**2*py**4*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 172*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) + 45*px**4*py**2*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 105*px**2*py**4*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 387*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 135*px**2*py**4*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 218*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 15*px**2*py**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 73*py**6/(y**6 + 3*y**4 + 3*y**2 + 1))*h**4 + 1/2*py**2*y**2 - 1/24*(4*py**4*y**4/(y**2 + 1) + 3*px**2*py**2*y**2/(y**2 + 1) + 2*py**4*y**2/(y**2 + 1) - 2*py**4/(y**2 + 1))*h**2 + 1/2*px**2 + 1/2*py**2
            emod6 = lambda px,x,py,y: 1/387072*(2880*py**8*y**8/(y**6 + 3*y**4 + 3*y**2 + 1) + 2436*px**2*py**6*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 18720*py**8*y**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 8764*px**2*py**6*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) - 5400*py**8*y**4/(y**6 + 3*y**4 + 3*y**2 + 1) + 6097*px**2*py**6*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) + 15300*py**8*y**2/(y**6 + 3*y**4 + 3*y**2 + 1) - 280*px**2*py**6/(y**6 + 3*y**4 + 3*y**2 + 1) - 900*py**8/(y**6 + 3*y**4 + 3*y**2 + 1))*h**6 - 1/2880*(24*py**6*y**6/(y**4 + 2*y**2 + 1) + 20*px**2*py**4*y**4/(y**4 + 2*y**2 + 1) - 48*py**6*y**4/(y**4 + 2*y**2 + 1) - 20*px**2*py**4*y**2/(y**4 + 2*y**2 + 1) - 63*py**6*y**2/(y**4 + 2*y**2 + 1) + 5*px**2*py**4/(y**4 + 2*y**2 + 1) + 9*py**6/(y**4 + 2*y**2 + 1))*h**4 + 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2
    switch = {"M": emod1, "TM": emod2, "MT": emod3, "TT": emod4, "T": emod5, "4th":emod6}
    if method in switch:
        return switch[method]
    else:
        return lambda px,x,py,y: 1/2*py**2*y**2 + 1/2*px**2 + 1/2*py**2
        
def mod_N(order, method,h, potential=False):
    if potential:
        if order == 0:
            nmod1 = lambda px,x,py,y: 1/np.sqrt(1+y**2)
            nmod2=nmod3=nmod4=nmod5=nmod6 = nmod1
        if order == 2:
            nmod1 = lambda px,x,py,y: 1/24*(h**2*py**2 - 2*(h**2*py**2 - h**2 - 12)*y**2 + 24)/(y**2 + 1)**(3/2)
            nmod2 = lambda px,x,py,y: -1/12*(h**2*py**2 - (2*h**2*py**2 + h**2 + 12)*y**2 - 12)/(y**2 + 1)**(3/2)
            nmod3 = lambda px,x,py,y: 1/24*(h**2*py**2 - 2*(h**2*py**2 - h**2 - 12)*y**2 + 24)/(y**2 + 1)**(3/2)
            nmod4 = lambda px,x,py,y: -1/12*(h**2*py**2 - (2*h**2*py**2 + h**2 + 12)*y**2 - 12)/(y**2 + 1)**(3/2)
            nmod5 = lambda px,x,py,y: -1/12*(h**2*py**2 - (2*h**2*py**2 + h**2 + 12)*y**2 - 12)/(y**2 + 1)**(3/2)
            nmod6 = lambda px,x,py,y: 1/np.sqrt(1+y**2)
        if order == 4:
            nmod1 = lambda px,x,py,y: 1/5760*(3*h**4*py**4 + 8*(11*h**4*py**4 + 20*h**4 + (37*h**4 - 60*h**2)*py**2 + 60*h**2 + 720)*y**6 - 4*(124*h**4*py**4 - 13*h**4 - 15*(h**4 - 12*h**2)*py**2 - 240*h**2 - 4320)*y**4 - 24*(3*h**4 - 10*h**2)*py**2 - (581*h**4*py**4 - 40*h**4*px**2 + 308*h**4*py**2 - 40*h**4*x**2 + 108*h**4 - 480*h**2 - 17280)*y**2 + 5760)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod2 = lambda px,x,py,y: -1/720*(60*h**4*px*py*x*y**3 + 39*h**4*py**4 - 30*h**4*px*py*x*y + (184*h**4*py**4 - 5*h**4 + 4*(17*h**4 - 30*h**2)*py**2 - 60*h**2 - 720)*y**6 - (88*h**4*py**4 - 30*h**4*px**2 - h**4 - 30*(5*h**4*px**2 + h**4 - 6*h**2)*py**2 + 120*h**2 + 2160)*y**4 + 6*(5*h**4*px**2 - h**4 + 10*h**2)*py**2 - (233*h**4*py**4 + 20*h**4*px**2 + 5*h**4*x**2 - 6*h**4 + 4*(45*h**4*px**2 + 11*h**4)*py**2 + 60*h**2 + 2160)*y**2 - 720)/((y**6 + 3*y**4 + 3*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod3 = lambda px,x,py,y: -1/5760*(240*h**4*px*py*x*y**3 - 3*h**4*py**4 + 240*h**4*px*py*x*y - 8*(11*h**4*py**4 + 35*h**4 + (7*h**4 - 60*h**2)*py**2 + 60*h**2 + 720)*y**6 + 4*(124*h**4*py**4 + 30*h**4*px**2 - 73*h**4 - 15*(2*h**4*px**2 - 5*h**4 - 12*h**2)*py**2 - 240*h**2 - 4320)*y**4 + 24*(5*h**4*px**2 - 2*h**4 - 10*h**2)*py**2 + (581*h**4*py**4 + 200*h**4*px**2 + 308*h**4*py**2 - 40*h**4*x**2 - 12*h**4 - 480*h**2 - 17280)*y**2 - 5760)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod4 = lambda px,x,py,y: -1/720*(90*h**4*px*py*x*y**3 + 39*h**4*py**4 + 4*(46*h**4*py**4 - 5*h**4 + 2*(h**4 - 15*h**2)*py**2 - 15*h**2 - 180)*y**6 - (88*h**4*py**4 - 45*h**4*px**2 + 29*h**4 - 15*(15*h**4*px**2 - 4*h**4 - 12*h**2)*py**2 + 120*h**2 + 2160)*y**4 + 12*(2*h**4 + 5*h**2)*py**2 - (233*h**4*py**4 - 10*h**4*px**2 + 5*h**4*x**2 + 9*h**4 + (135*h**4*px**2 + 44*h**4)*py**2 + 60*h**2 + 2160)*y**2 - 720)/((y**6 + 3*y**4 + 3*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod5 = lambda px,x,py,y: -1/720*(90*h**4*px*py*x*y**3 + 39*h**4*py**4 - 30*h**4*px*py*x*y + 2*(92*h**4*py**4 + 5*h**4 + 4*(16*h**4 - 15*h**2)*py**2 - 30*h**2 - 360)*y**6 - (88*h**4*py**4 - 15*h**4*px**2 - h**4 - 15*(5*h**4*px**2 - 2*h**4 - 12*h**2)*py**2 + 120*h**2 + 2160)*y**4 + 12*(2*h**4 + 5*h**2)*py**2 - (233*h**4*py**4 + 5*h**4*px**2 - 10*h**4*x**2 + 9*h**4 + (45*h**4*px**2 + 134*h**4)*py**2 + 60*h**2 + 2160)*y**2 - 720)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod6 = lambda px,x,py,y: 1/2880*(30*h**4*px*py*x*y**3 + 9*h**4*py**4 + 6*(14*h**4*py**4 + 23*h**4*py**2 + 5*h**4 + 480)*y**6 + 4*h**4*py**2 - (78*h**4*py**4 - 10*h**4*px**2 - 21*h**4 - 10*(2*h**4*px**2 + h**4)*py**2 - 8640)*y**4 - (153*h**4*py**4 + 10*h**4*px**2 + 9*h**4 + 2*(5*h**4*px**2 + 62*h**4)*py**2 - 8640)*y**2 + 2880)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
        if order == 6:
            nmod1 = lambda px,x,py,y: 0
            nmod2 = lambda px,x,py,y: 0
            nmod3 = lambda px,x,py,y: 0
            nmod4 = lambda px,x,py,y: 0
            nmod5 = lambda px,x,py,y: 0
            nmod6 = lambda px,x,py,y: 0   
    else:
        if order == 0:
            nmod1 = lambda px,x,py,y: 1/np.sqrt(1+y**2)
            nmod2=nmod3=nmod4=nmod5=nmod6 = nmod1
        if order == 2:
            nmod1 = lambda px,x,py,y: 1/24*(h**2*py**2 - 2*(h**2*py**2 - 12)*y**2 + 24)*np.sqrt(y**2 + 1)/(y**4 + 2*y**2 + 1)
            nmod2 = lambda px,x,py,y: -1/12*(h**2*py**2 - 2*(h**2*py**2 + 6)*y**2 - 12)*np.sqrt(y**2 + 1)/(y**4 + 2*y**2 + 1)
            nmod3 = lambda px,x,py,y: 1/24*(h**2*py**2 - 2*(h**2*py**2 - 12)*y**2 + 24)*np.sqrt(y**2 + 1)/(y**4 + 2*y**2 + 1)
            nmod4 = lambda px,x,py,y: -1/12*(h**2*py**2 - 2*(h**2*py**2 + 6)*y**2 - 12)*np.sqrt(y**2 + 1)/(y**4 + 2*y**2 + 1)
            nmod5 = lambda px,x,py,y: -1/12*(h**2*py**2 - 2*(h**2*py**2 + 6)*y**2 - 12)*np.sqrt(y**2 + 1)/(y**4 + 2*y**2 + 1)
            nmod6 = lambda px,x,py,y: 1/np.sqrt(1+y**2)
        if order == 4:
            nmod1 = lambda px,x,py,y: 1/5760*(3*h**4*py**4 + 8*(11*h**4*py**4 - 60*h**2*py**2 + 720)*y**4 + 240*h**2*py**2 - 8*(73*h**4*py**4 + 30*h**2*py**2 - 1440)*y**2 + 5760)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            nmod2 = lambda px,x,py,y: -1/720*(39*h**4*py**4 + 8*(23*h**4*py**4 - 15*h**2*py**2 - 90)*y**6 - 2*(44*h**4*py**4 - 15*(5*h**4*px**2 - 6*h**2)*py**2 + 1080)*y**4 + 30*(h**4*px**2 + 2*h**2)*py**2 - (180*h**4*px**2*py**2 + 233*h**4*py**4 + 2160)*y**2 - 720)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod3 = lambda px,x,py,y: 1/5760*(3*h**4*py**4 + 8*(11*h**4*py**4 - 60*h**2*py**2 + 720)*y**4 - 120*(h**4*px**2 - 2*h**2)*py**2 - 8*(73*h**4*py**4 - 15*(h**4*px**2 - 2*h**2)*py**2 - 1440)*y**2 + 5760)*np.sqrt(y**2 + 1)/(y**6 + 3*y**4 + 3*y**2 + 1)
            nmod4 = lambda px,x,py,y: -1/720*(39*h**4*py**4 + 8*(23*h**4*py**4 - 15*h**2*py**2 - 90)*y**6 - (88*h**4*py**4 - 45*(5*h**4*px**2 - 4*h**2)*py**2 + 2160)*y**4 + 60*h**2*py**2 - (135*h**4*px**2*py**2 + 233*h**4*py**4 + 2160)*y**2 - 720)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod5 = lambda px,x,py,y: -1/720*(39*h**4*py**4 + 8*(23*h**4*py**4 - 15*h**2*py**2 - 90)*y**6 - (88*h**4*py**4 - 15*(5*h**4*px**2 - 12*h**2)*py**2 + 2160)*y**4 + 60*h**2*py**2 - (45*h**4*px**2*py**2 + 233*h**4*py**4 + 2160)*y**2 - 720)*np.sqrt(y**2 + 1)/(y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)
            nmod6 = lambda px,x,py,y: 1/2880*(9*h**4*py**4 + 12*(7*h**4*py**4 + 240)*y**6 + 2*(10*h**4*px**2*py**2 - 39*h**4*py**4 + 4320)*y**4 - (10*h**4*px**2*py**2 + 153*h**4*py**4 - 8640)*y**2 + 2880)/((y**6 + 3*y**4 + 3*y**2 + 1)*np.sqrt(y**2 + 1))
        if order == 6:
            nmod1 = lambda px,x,py,y: 1/967680*(4707*h**6*py**6 + 504*h**4*py**4 - 32*(197*h**6*py**6 - 462*h**4*py**4 + 2520*h**2*py**2 - 30240)*y**6 + 16*(12013*h**6*py**6 - 5208*h**4*py**4 - 7560*h**2*py**2 + 181440)*y**4 + 40320*h**2*py**2 - 2*(64343*h**6*py**6 + 48804*h**4*py**4 - 1451520)*y**2 + 967680)/((y**6 + 3*y**4 + 3*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod2 = lambda px,x,py,y: -1/60480*(4209*h**6*py**6 - 8*(4849*h**6*py**6 - 1932*h**4*py**4 + 1260*h**2*py**2 + 7560)*y**10 + 2*(16742*h**6*py**6 - 147*(189*h**6*px**2 - 80*h**4)*py**4 + 1260*(5*h**4*px**2 - 14*h**2)*py**2 - 151200)*y**8 + 3*(41246*h**6*py**6 + 105*(263*h**6*px**2 - 60*h**4)*py**4 - 420*(9*h**6*px**4 - 8*h**4*px**2 + 32*h**2)*py**2 - 201600)*y**6 + 252*(21*h**6*px**2 + 13*h**4)*py**4 - 5*(787*h**6*py**6 - 84*(168*h**6*px**2 - 103*h**4)*py**4 - 126*(33*h**6*px**4 - 24*h**4*px**2 - 16*h**2)*py**2 + 120960)*y**4 + 315*(3*h**6*px**4 + 8*h**4*px**2 + 16*h**2)*py**2 - (51188*h**6*py**6 + 21*(2979*h**6*px**2 + 620*h**4)*py**4 + 630*(15*h**6*px**4 + 16*h**4*px**2 - 16*h**2)*py**2 + 302400)*y**2 - 60480)/((y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod3 = lambda px,x,py,y: 1/967680*(4707*h**6*py**6 - 32*(197*h**6*py**6 - 462*h**4*py**4 + 2520*h**2*py**2 - 30240)*y**6 + 504*(15*h**6*px**2 + h**4)*py**4 + 16*(12013*h**6*py**6 + 21*(3*h**6*px**2 - 248*h**4)*py**4 + 1260*(h**4*px**2 - 6*h**2)*py**2 + 181440)*y**4 + 2520*(3*h**6*px**4 - 8*h**4*px**2 + 16*h**2)*py**2 - 2*(64343*h**6*py**6 - 84*(627*h**6*px**2 - 581*h**4)*py**4 - 1451520)*y**2 + 967680)/((y**6 + 3*y**4 + 3*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod4 = lambda px,x,py,y: -1/60480*(4209*h**6*py**6 - 8*(4849*h**6*py**6 - 1932*h**4*py**4 + 1260*h**2*py**2 + 7560)*y**10 + 2*(16742*h**6*py**6 - 147*(321*h**6*px**2 - 80*h**4)*py**4 + 630*(15*h**4*px**2 - 28*h**2)*py**2 - 151200)*y**8 + 3*(41246*h**6*py**6 + 84*(169*h**6*px**2 - 75*h**4)*py**4 - 105*(81*h**6*px**4 - 84*h**4*px**2 + 128*h**2)*py**2 - 201600)*y**6 + 252*(6*h**6*px**2 + 13*h**4)*py**4 - 5*(787*h**6*py**6 - 42*(489*h**6*px**2 - 206*h**4)*py**4 - 126*(27*h**6*px**4 - 6*h**4*px**2 - 16*h**2)*py**2 + 120960)*y**4 + 5040*h**2*py**2 - 4*(12797*h**6*py**6 + 105*(78*h**6*px**2 + 31*h**4)*py**4 + 315*(9*h**4*px**2 - 8*h**2)*py**2 + 75600)*y**2 - 60480)/((y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod5 = lambda px,x,py,y: -1/60480*(4209*h**6*py**6 - 8*(4849*h**6*py**6 - 1932*h**4*py**4 + 1260*h**2*py**2 + 7560)*y**10 + 2*(16742*h**6*py**6 - 147*(87*h**6*px**2 - 80*h**4)*py**4 + 630*(5*h**4*px**2 - 28*h**2)*py**2 - 151200)*y**8 + 3*(41246*h**6*py**6 + 252*(21*h**6*px**2 - 25*h**4)*py**4 - 105*(9*h**6*px**4 - 28*h**4*px**2 + 128*h**2)*py**2 - 201600)*y**6 + 252*(2*h**6*px**2 + 13*h**4)*py**4 - 5*(787*h**6*py**6 - 42*(143*h**6*px**2 - 206*h**4)*py**4 - 126*(3*h**6*px**4 - 2*h**4*px**2 - 16*h**2)*py**2 + 120960)*y**4 + 5040*h**2*py**2 - 4*(12797*h**6*py**6 + 105*(26*h**6*px**2 + 31*h**4)*py**4 + 315*(3*h**4*px**2 - 8*h**2)*py**2 + 75600)*y**2 - 60480)/((y**10 + 5*y**8 + 10*y**6 + 10*y**4 + 5*y**2 + 1)*np.sqrt(y**2 + 1))
            nmod6 = lambda px,x,py,y: 1/483840*(2385*h**6*py**6 - 72*(225*h**6*py**6 - 196*h**4*py**4 - 6720)*y**8 + 2*(38895*h**6*py**6 + 1680*h**4*px**2*py**2 - 7*(475*h**6*px**2 - 72*h**4)*py**4 + 967680)*y**6 + 28*(5*h**6*px**2 + 54*h**4)*py**4 + (39090*h**6*py**6 + 1680*h**4*px**2*py**2 + 77*(215*h**6*px**2 - 504*h**4)*py**4 + 2903040)*y**4 - (52515*h**6*py**6 + 1680*h**4*px**2*py**2 + 7*(1015*h**6*px**2 + 3456*h**4)*py**4 - 1935360)*y**2 + 483840)/((y**8 + 4*y**6 + 6*y**4 + 4*y**2 + 1)*np.sqrt(y**2 + 1))
    switch = {"M": nmod1, "TM": nmod2, "MT": nmod3, "TT": nmod4, "T": nmod5, "4th":nmod6}
    if method in switch:
        return switch[method]
    else:
        return lambda px,x,py,y: 1/np.sqrt(1+y**2)
